service: rimac-service-api-aws

provider:
  name: aws
  runtime: nodejs20.x
  stage: "dev"
  region: "us-east-1"
  memorySize: 512
  timeout: 10
  architecture: x86_64
  environment:
    DYNAMODB_CACHE_TABLE: ${self:service}-${sls:stage}-CacheTable
    DYNAMODB_FUSION_TABLE: ${self:service}-${sls:stage}-FusionadosTable
    DYNAMODB_PERSONALIZADO_TABLE: ${self:service}-${sls:stage}-PersonalizadosTable
    DYNAMODB_RATE_LIMITING_TABLE: ${self:service}-${sls:stage}-RateLimitingTable
    LOG_LEVEL: INFO
    OMDB_API_KEY: 81381cff
  tracing:
    apiGateway: true
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      fullExecutionData: true
      level: INFO
  logRetentionInDays: 7
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/*
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

package:
  individually: true
  exclude:
    - app/**
    - jest.config.*
    - README.md
    - jest.config.ts
    - jest.unit.config.js
    - README.md
    - tsconfig.json
    - tests/**
    - docs/**

functions:
  getFusionados:
    handler: dist/handler.getFusionados
    description: Get merged data from APIs
    Properties:
      Tracing: Active
    events:
      - http:
          path: /fusionados
          method: get

  postAlmacenar:
    handler: dist/handler.postAlmacenar
    description: Store custom data in the database
    Properties:
      Tracing: Active
    events:
      - http:
          path: /almacenar
          method: post

  getHistorial:
    handler: dist/handler.getHistorial
    description: Get history of merged API responses
    Properties:
      Tracing: Active
    events:
      - http:
          path: /historial
          method: get

plugins:
  - serverless-offline

resources:
  Resources:
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_CACHE_TABLE}
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    FusionadosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_FUSION_TABLE}
        AttributeDefinitions:
          - AttributeName: fusionKey
            AttributeType: S
        KeySchema:
          - AttributeName: fusionKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    PersonalizadoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_PERSONALIZADO_TABLE}
        AttributeDefinitions:
          - AttributeName: perId
            AttributeType: S
        KeySchema:
          - AttributeName: perId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    RateLimitingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_RATE_LIMITING_TABLE}
        AttributeDefinitions:
          - AttributeName: rateKey
            AttributeType: S
        KeySchema:
          - AttributeName: rateKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
